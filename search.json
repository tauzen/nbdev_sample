[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards not including jokers\nWhen we initially create a deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♣️;2♣️;3♣️;4♣️;5♣️;6♣️;7♣️;8♣️;9♣️;10♣️;J♣️;Q♣️;K♣️;A♦️;2♦️;3♦️;4♦️;5♦️;6♦️;7♦️;8♦️;9♦️;10♦️;J♦️;Q♦️;K♦️;A♥️;2♥️;3♥️;4♥️;5♥️;6♥️;7♥️;8♥️;9♥️;10♥️;J♥️;Q♥️;K♥️;A♠️;2♠️;3♠️;4♠️;5♠️;6♠️;7♠️;8♠️;9♠️;10♠️;J♠️;Q♠️;K♠️\n\n\nThat should be 52 cards\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits we defined for Card\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']\n\n\nWe can check if the Ace of Clubs is in the deck:\n\nCard(1, 1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last card\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3, 13))\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_sample.card.Card)\n\nRemove a specific card from the deck\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCadr to remove\n\n\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\n\nassert card23 not in deck",
    "crumbs": [
      "Deck"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_sample",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "nbdev_sample"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "nbdev_sample",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall nbdev_sample in Development mode\n# make sure nbdev_sample package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to nbdev_sample\n$ nbdev_prepare",
    "crumbs": [
      "nbdev_sample"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "nbdev_sample",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/tauzen/nbdev_sample.git\nor from conda\n$ conda install -c tauzen nbdev_sample\nor from pypi\n$ pip install nbdev_sample\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "nbdev_sample"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_sample",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\nCard(suit=2, rank=10)\n\n10♥️\n\n\nSuits are numbered according to this list\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']",
    "crumbs": [
      "nbdev_sample"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card",
    "section": "",
    "text": "We will be using number to represent playing card clubs and ranks. These are the suits:\nsuits\n\n['♣️', '♦️', '♥️', '♠️']\nFor instance the suit at index 0:\nsuits[0]\n\n'♣️'\nThese are the ranks:\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance the rank at index 1 (note that there isn’t a playing card a position 0 since we want the ranks to match the indicies where possible)\nranks[1]\n\n'A'\nsource",
    "crumbs": [
      "card"
    ]
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, greater than work on the rank suit indices:\n\nsource\n\nCard.__gt__\n\n Card.__gt__ (b:__main__.Card)\n\nReturn self&gt;value.\n\nsource\n\n\nCard.__lt__\n\n Card.__lt__ (b:__main__.Card)\n\nReturn self&lt;value.\n\nsource\n\n\nCard.__eq__\n\n Card.__eq__ (b:__main__.Card)\n\nReturn self==value.\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\n\n\nassert Card(suit=1, rank=3) &lt; Card(suit=2, rank=3)\n\n\nassert Card(suit=3, rank=3) &gt; Card(suit=2, rank=3)",
    "crumbs": [
      "card"
    ]
  }
]